import { IMapFunction, IObservable, mapDistinctObservable, mapObservable } from '@lirx/core';
import { EQUAL_FUNCTION_STRICT_EQUAL, IDistinctEqualFunctionOptions } from '@lirx/utils';
import { IEqualFunction } from '@lirx/utils/src/misc/equal-function/equal-function.type';
import { mapDistinctArrayItemsObservable } from '../helpers/observables/map-distinct-array-items-observable';
import { Store } from './store.class';
import { IReadStateFunction } from './types/read-state-function.type';

export type ISelectFunction<GState, GValue> = IMapFunction<GState, GValue>;

// export type InferArrayItemValue<GValue> = GValue extends readonly (infer GItem)[]
//   ? GItem extends object
//     ? GItem
//     : { ERROR: "GValue is not an array of objects" }
//   : { ERROR: "GValue is not an array of objects" }
//   ;

export type InferMapArrayItemsMapFunction<GValue, GOut> = GValue extends readonly (infer GItem)[]
  ? GItem extends object
    ? IMapFunction<GItem, GOut>
    : { ERROR: "GValue is not an array of objects" }
  : { ERROR: "GValue is not an array of objects" }
  ;

export interface ISelectorOptions<GState, GValue> extends IDistinctEqualFunctionOptions<GValue> {

}

export class Selector<GState, GValue> {
  readonly #store: Store<GState>;
  readonly #map: ISelectFunction<GState, GValue>;
  readonly #equal: IEqualFunction<GValue>;
  readonly #read: IReadStateFunction<GValue>;

  constructor(
    store: Store<GState>,
    map: ISelectFunction<GState, GValue>,
    {
      equal = EQUAL_FUNCTION_STRICT_EQUAL,
    }: ISelectorOptions<GState, GValue> = {},
  ) {
    this.#store = store;
    this.#map = map;
    this.#equal = equal;
    this.#read = (): GValue => {
      return this.#map(this.#store.state);
    };
  }

  get store(): Store<GState> {
    return this.#store;
  }

  get get(): IReadStateFunction<GValue> {
    return this.#read;
  }

  get get$(): IObservable<GValue> {
    return mapDistinctObservable(
      this.#store.state$,
      this.#map,
      {
        equal: this.#equal,
      },
    );
  }

  child(): any {

  }

  map$<GOut>(
    map: IMapFunction<GValue, GOut>,
  ): IObservable<GOut> {
    return mapObservable<GValue, GOut>(this.get$, map);
  }

  mapArrayItems$<GOut>(
    map: InferMapArrayItemsMapFunction<GValue, GOut>,
  ): IObservable<readonly GOut[]> {
    return mapDistinctArrayItemsObservable<any, GOut>(
      this.get$ as any,
      map as any,
    );
  }
}
